/**
* GBA.js - GameBoy Advance emulator in JavaScript
* @author Maxime Euzière
* @param file: the file name/path of the GBA game ROM to play.
* @param canvas: the HTML canvas element to use as a GBA screen (240 * 160 px).
* @param progressbar (optional): the HTML progress element showing the ROM loading status.
**/
function gba(file, canvas, progressbar){

  /******************
    Initializations 
  ******************/

  /* Temp vars, CPU registers, memory, bit masks (see "init.js") */
  var i,x,y,t,u,v,w,z,xhr=new XMLHttpRequest,r=[],cpsr,pc,r_irq=[],cpsr_irq,r_fiq=[],cpsr_fiq,r_svc=[],cpsr_svc,r_abt=[],cpsr_abt,r_und=[],cpsr_und,m={2:[],3:[],4:[],5:[],6:[],7:[],8:[],14:[]},bit0=1,bit1=2,bit2=4,bit3=8,bit4=16,bit5=32,bit6=64,bit7=128,bit8=256,bit9=512,bit10=1024,bit11=2048,bit12=4096,bit13=8192,bit14=16384,bit15=32768,bit27=134217728,bits0_1=3,bits0_2=7,bits0_3=15,bits0_4=31,bits0_5=63,bits0_7=255,bits0_9=1023,bits0_A=2047,bits0_D=16383,bits0_F=65535,bits1_9=1022,bits2_3=12,bits4_5=48,bits4_6=112,bits4_7= 240,bits5_6=96,bits6_7=192,bits7_8=384,bits8_9=768,bits8_A=1792,bits8_B=3840,bits8_C=7936,bits8_E=32512,bits8_F=65280,bitsC_D=12288,bitsC_F=61440,bitsD_F=57344,bitsE_F=49152,bits0_26=134217727,bits0_27=268435455,bits0_31=4294967295,bits8_26=134217472;

  /************
    Functions
  ************/

  /* Load the game ROM in memory (see "load.js") */
  xhr.addEventListener("progress",function(a){progressbar&&(progressbar.value=a.loaded/a.total)});xhr.open("GET",file);xhr.responseType="arraybuffer";xhr.onload=function(){m[8]="undefined"!=typeof VBArray?VBArray(xhr.a).b():new Uint8Array(xhr.response);progressbar.style.visibility="hidden";play()};xhr.send();progressbar&&(progressbar.style.visibility="visible");

  /* Memory accessor (see "mem.js") */
  function mem(a,f,d,c,g){var e=a>>24,c=c||4294967295;switch(e){case 2:a=(a-33554432)%262144;break;case 3:a=(a-50331648)%32768;break;case 4:a=(a-67108864)%65536;if(!g){0==a&&(c&=65527);4==a&&(c&=65528);132==a&&(c&=65520);a%2&&(287<a&&295>a&&mem(67109160,2)&8192==bitsC_D)&&(c&=0);if(296==a)switch(mem(67109160,2)&bitsC_D){case 4096:c&=65531;break;case 8192:c&=65411;break;case 768:c&=65423}304==a&&(c&=62208);304==a&&(c&=32767)}break;case 5:a=(a-83886080)%1024;break;case 6:a=(a-100663296)%131072;98303<a&& 131072>a&&(a-=8E3);break;case 7:a=(a-117440512)%1024;break;case 8:case 9:case 10:case 11:case 12:case 13:e=8;a=(a-134217728)%33554432;break;case 14:case 15:e=14,a=(a-234881024)%16777216}if(d&&1==f){t=mem(67108864,2)&bits0_2;if(7==e||6==e&&(0<=t&&2>=t&&65536<=a&&98303>=a||3<=t&&5>=t&&81920<=a&&98303>=a))return;if(5==e||6==e&&(0<=t&&2>=t&&0<=a&&65535>=a||3<=t&&5>=t&&0<=a&&81919>=a))f=2,d*=257}if(d)for(i=0;i<f;i++,d>>=8,c>>=8)m[e][a+i]=((m[e][a+i]||0)&255-(c&255))+(d&c&255);else{d=0;for(i=f;i;i--)d=(d<<8)+(m[e][a+i-1]||0);return d}};

  /* Cross-browser requestAnimationFrame (see "rAF.js") */
  for(t=0,v=["ms","moz","webkit","o"],i=0;i<v.length&&!window.requestAnimationFrame;++i)window.requestAnimationFrame=window[v[i]+"RequestAnimationFrame"],window.a=window[v[i]+"CancelAnimationFrame"]||window[v[i]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(g){var d=(new Date).getTime(),e=Math.max(0,16-(d-t)),h=window.setTimeout(function(){g(d+e)},e);t=d+e;return h});

  /* Play the game ROM */
  function play(){
    test(); return;
  }

  /* Emulator tests (see "test.js") */
  function test(){console.log("*************************");console.log("* ROM load verification *");console.log("*************************");console.log('The ROM "'+file+'" ( '+m[8].length+" bytes ) was loaded successfully.");console.log("*********************");console.log("* Memory operations *");console.log("*********************");console.log("8-bit value stored at the address 0x02000005: "+mem("0x02000005",1)+" (0 expected)");console.log("Storing the 8-bit value 0xEE at the address 0x02000005."); mem("0x02000005",1,238);console.log("Reading the 8-bit value stored at the address 0x02000005: 0x"+mem("0x02000005",1).toString(16).toUpperCase()+" (0xEE expected)");console.log("Reading the 8-vit value stored at the address 0x02080005, a mirror of 0x02000005: 0x"+mem("0x02080005",1).toString(16).toUpperCase()+" (0xEE expected)");console.log("Storing the 32-bit value 0x12345678 at the address 0x02040005, a mirror of 0x02000005.");mem("0x02000005",4,305419896);console.log("Reading the 32-bit value stored at the address 0x02000005: 0x"+ mem("0x02000005",4).toString(16).toUpperCase()+" (0x12345678 expected)");console.log("Reading the 8-bit value stored at the address 0x02000005: 0x"+mem("0x02000005",1).toString(16).toUpperCase()+" (0x78 expected)");console.log("Reading the 8-bit value stored at the address 0x02000006: 0x"+mem("0x02000006",1).toString(16).toUpperCase()+" (0x56 expected)");console.log("Reading the 8-bit value stored at the address 0x02000007: 0x"+mem("0x02000007",1).toString(16).toUpperCase()+" (0x34 expected)");console.log("Reading the 8-bit value stored at the address 0x02000008: 0x"+ mem("0x02000008",1).toString(16).toUpperCase()+" (0x12 expected)");console.log("Reading the 32-bit value stored at the address 0x02000002: 0x"+mem("0x02000002",4).toString(16).toUpperCase()+" (0x78000000 expected)");console.log("Reading the 32-bit value stored at the address 0x02000008: 0x"+mem("0x02000008",4).toString(16).toUpperCase()+" (0x12 expected)");console.log("Reading the 16-bit value stored at the address 0x02000005: 0x"+mem("0x02000005",2).toString(16).toUpperCase()+" (0x5678 expected)"); console.log("Reading the 16-bit value stored at the address 0x02000007: 0x"+mem("0x02000007",2).toString(16).toUpperCase()+" (0x1234 expected)");console.log('Setting the bits 0-4 to 0b10101 (0x15) at the address 0x02000005".');mem("0x02000005",1,21,bits0_4);console.log("Reading the 8-bit value stored at the address 0x02000005: 0x"+mem("0x02000005",1).toString(16).toUpperCase()+" (0x75 expected - 0x78 with 0b10101 at the end)");console.log("Setting the 16-bit value 0xFFFF at the address 0x04000000. But in this register, bit 3 is read-only."); mem("0x04000000",2,65535);console.log("Reading the 16-bit value stored at the address 0x04000000: 0x"+mem("0x04000000",2).toString(16).toUpperCase()+" (0xFFF7 expected)");console.log("Setting the 16-bit value 0xFFFF at the address 0x04000000 and force write.");mem("0x04000000",2,65535,65535,!0);console.log("Reading the 16-bit value stored at the address 0x04000000: 0x"+mem("0x04000000",2).toString(16).toUpperCase()+" (0xFFFF expected)");console.log("Setting the bits 1-9 to 0b010101010 of the 16-bit value at the address 0x04000000 and force write."); mem("0x04000000",2,3412,bits1_9,!0);console.log("Reading the 16-bit value stored at the address 0x04000000: 0x"+mem("0x04000000",2).toString(16).toUpperCase()+" (0xFD55 expected)");console.log("Setting the 8-bit value 0x56 at the address 0x05000002. But in this memory, 8-bit writes are done twice.");mem("0x05000002",1,86);console.log("Reading the 8-bit value stored at the address 0x05000002: 0x"+mem("0x05000002",1).toString(16).toUpperCase()+" (0x56 expected)");console.log("Reading the 8-bit value stored at the address 0x05000003: 0x"+ mem("0x05000003",1).toString(16).toUpperCase()+" (0x56 expected)");console.log("Setting the 8-bit value 0x56 at the address 0x07000002. But in this memory, 8-bit writes have no effect.");mem("0x07000002",1,86);console.log("Reading the 8-bit value stored at the address 0x07000002: 0x"+mem("0x07000002",1).toString(16).toUpperCase()+" (0x0 expected)")};
}